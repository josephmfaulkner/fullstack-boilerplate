AWSTemplateFormatVersion: 2010-09-09
Conditions:
  CreateCodeBuildResources: !Equals
  - true
  - true
  CreateGitHubRepo: !Equals
  - !Ref 'CreateGitHubRepo'
  - true
  CreateWebSiteS3Bucket: !Equals
  - true
  - false
  SeedRepo: !Not
  - !Equals
    - !Ref 'CodeS3Bucket'
    - ''
  UseSubnet: !Not
  - !Equals
    - !Ref 'SubnetId'
    - subnet-none
Description: An HTML5 web page deployed to Amazon EC2.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Application
      Parameters:
      - ProjectId
  CreateCodeBuild: true
  ProjectTemplateId: static-html-ec2
  WebsiteS3Bucket: AWS::NoValue
Parameters:
  CodeS3Bucket:
    Default: ''
    NoEcho: true
    Type: String
  CodeS3Key:
    Default: ''
    NoEcho: true
    Type: String
  CreateGitHubRepo:
    AllowedValues:
    - true
    - false
    Default: false
    Type: String
  EnableIssues:
    AllowedValues:
    - true
    - false
    Default: false
    Type: String
  InstanceType:
    Default: t2.micro
    Description: The Amazon EC2 instance type to use.
    Type: String
  IsPrivate:
    AllowedValues:
    - true
    - false
    Default: false
    Type: String
  KeyPairName:
    Description: The name of the key pair used to make SSH connections to Amazon EC2 instances.
    Type: AWS::EC2::KeyPair::KeyName
  ProjectId:
    AllowedPattern: ^[a-z]([a-z0-9-])+$
    ConstraintDescription: Project IDs must be between 2 and 15 characters, begin with a letter, and only contain lowercase letters, numbers, and hyphens (-).
    Description: Project ID.
    MaxLength: 15
    MinLength: 2
    Type: String
  RepositoryBranch:
    Default: master
    Description: GitHub branch name.
    Type: String
  RepositoryName:
    Description: GitHub repository name.
    MaxLength: 100
    MinLength: 1
    Type: String
  RepositoryProviderUsername:
    Description: GitHub user name.
    Type: String
  RepositoryToken:
    Description: GitHub access token.
    NoEcho: true
    Type: String
  SubnetId:
    Default: subnet-none
    Description: The name of the VPC subnet to use for Amazon EC2 instances launched for this project.
    Type: String
  ThirdPartyWebhookSecretToken:
    Description: GitHub Webhook authentication.
    NoEcho: true
    Type: String
  VpcId:
    Description: The ID of the Amazon Virtual Private Cloud (VPC) to use for Amazon EC2 instances.
    Type: AWS::EC2::VPC::Id
Resources:
  CloudFormationTrustRole:
    Description: Creating service role in IAM for AWS CloudFormation
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - cloudformation.amazonaws.com
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - apigateway:DELETE
            - apigateway:GET
            - apigateway:PATCH
            - apigateway:POST
            - apigateway:PUT
            - codedeploy:CreateApplication
            - codedeploy:CreateDeployment
            - codedeploy:CreateDeploymentConfig
            - codedeploy:CreateDeploymentGroup
            - codedeploy:DeleteApplication
            - codedeploy:DeleteDeployment
            - codedeploy:DeleteDeploymentConfig
            - codedeploy:DeleteDeploymentGroup
            - codedeploy:GetDeployment
            - codedeploy:GetDeploymentConfig
            - codedeploy:GetDeploymentGroup
            - codedeploy:RegisterApplicationRevision
            - codestar:SyncResources
            - config:DeleteConfigRule
            - config:DescribeConfigRules
            - config:ListTagsForResource
            - config:PutConfigRule
            - config:TagResource
            - config:UntagResource
            - dynamodb:CreateTable
            - dynamodb:DeleteTable
            - dynamodb:DescribeContinuousBackups
            - dynamodb:DescribeTable
            - dynamodb:DescribeTimeToLive
            - dynamodb:ListTagsOfResource
            - dynamodb:TagResource
            - dynamodb:UntagResource
            - dynamodb:UpdateContinuousBackups
            - dynamodb:UpdateTable
            - dynamodb:UpdateTimeToLive
            - ec2:AssociateIamInstanceProfile
            - ec2:AttachVolume
            - ec2:CreateSecurityGroup
            - ec2:CreateTags
            - ec2:DescribeIamInstanceProfileAssociations
            - ec2:DescribeInstances
            - ec2:DescribeSecurityGroups
            - ec2:DescribeSubnets
            - ec2:DetachVolume
            - ec2:DisassociateIamInstanceProfile
            - ec2:ModifyInstanceAttribute
            - ec2:ModifyInstanceCreditSpecification
            - ec2:ModifyInstancePlacement
            - ec2:MonitorInstances
            - ec2:ReplaceIamInstanceProfileAssociation
            - ec2:RunInstances
            - ec2:StartInstances
            - ec2:StopInstances
            - ec2:TerminateInstances
            - events:DeleteRule
            - events:DescribeRule
            - events:ListTagsForResource
            - events:PutRule
            - events:PutTargets
            - events:RemoveTargets
            - events:TagResource
            - events:UntagResource
            - kinesis:AddTagsToStream
            - kinesis:CreateStream
            - kinesis:DecreaseStreamRetentionPeriod
            - kinesis:DeleteStream
            - kinesis:DescribeStream
            - kinesis:IncreaseStreamRetentionPeriod
            - kinesis:RemoveTagsFromStream
            - kinesis:StartStreamEncryption
            - kinesis:StopStreamEncryption
            - kinesis:UpdateShardCount
            - lambda:CreateAlias
            - lambda:CreateFunction
            - lambda:DeleteAlias
            - lambda:DeleteFunction
            - lambda:DeleteFunctionConcurrency
            - lambda:GetFunction
            - lambda:ListTags
            - lambda:ListVersionsByFunction
            - lambda:PublishVersion
            - lambda:PutFunctionConcurrency
            - lambda:TagResource
            - lambda:UntagResource
            - lambda:UpdateAlias
            - lambda:UpdateFunctionCode
            - lambda:UpdateFunctionConfiguration
            - s3:CreateBucket
            - s3:DeleteBucket
            - s3:DeleteBucketWebsite
            - s3:PutAccelerateConfiguration
            - s3:PutAnalyticsConfiguration
            - s3:PutBucketAcl
            - s3:PutBucketCORS
            - s3:PutBucketLogging
            - s3:PutBucketNotification
            - s3:PutBucketPublicAccessBlock
            - s3:PutBucketVersioning
            - s3:PutBucketWebsite
            - s3:PutEncryptionConfiguration
            - s3:PutInventoryConfiguration
            - s3:PutLifecycleConfiguration
            - s3:PutMetricsConfiguration
            - s3:PutReplicationConfiguration
            - sns:CreateTopic
            - sns:DeleteTopic
            - sns:GetTopicAttributes
            - sns:ListSubscriptionsByTopic
            - sns:ListTopics
            - sns:SetSubscriptionAttributes
            - sns:Subscribe
            - sns:Unsubscribe
            - sqs:CreateQueue
            - sqs:DeleteQueue
            - sqs:GetQueueAttributes
            - sqs:GetQueueUrl
            - sqs:ListQueueTags
            - sqs:TagQueue
            - sqs:UntagQueue
            Effect: Allow
            Resource:
            - '*'
          - Action:
            - ec2:AuthorizeSecurityGroupEgress
            - ec2:AuthorizeSecurityGroupIngress
            - ec2:DeleteSecurityGroup
            - ec2:RevokeSecurityGroupEgress
            - ec2:RevokeSecurityGroupIngress
            Condition:
              StringEquals:
                ec2:Vpc: !Sub 'arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${VpcId}'
            Effect: Allow
            Resource: '*'
          - Action:
            - cloudformation:CreateChangeSet
            Effect: Allow
            Resource:
            - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31'
            - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:aws:transform/CodeStar'
          - Action:
            - iam:PassRole
            Condition:
              StringEquals:
                iam:PassedToService: ec2.amazonaws.com
            Effect: Allow
            Resource:
            - !GetAtt 'WebAppRole.Arn'
          - Action:
            - iam:PassRole
            Effect: Allow
            Resource:
            - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/CodeStar-${ProjectId}*'
          - Action:
            - iam:CreateServiceLinkedRole
            - iam:DeleteInstanceProfile
            - iam:DeleteUser
            - iam:DeleteRole
            - iam:GetRole
            Effect: Allow
            Resource: '*'
          - Action:
            - iam:AttachRolePolicy
            - iam:AttachUserPolicy
            - iam:CreateRole
            - iam:CreateUser
            - iam:DeleteRolePolicy
            - iam:DetachRolePolicy
            - iam:DeleteUserPolicy
            - iam:DetachUserPolicy
            - iam:PutRolePolicy
            - iam:PutRolePermissionsBoundary
            - iam:PutUserPermissionsBoundary
            Condition:
              StringEquals:
                iam:PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary'
            Effect: Allow
            Resource: '*'
          - Action:
            - kms:CreateKey
            - kms:CreateAlias
            - kms:DeleteAlias
            - kms:DisableKey
            - kms:EnableKey
            - kms:UpdateAlias
            - kms:TagResource
            - kms:UntagResource
            Effect: Allow
            Resource: '*'
          - Action:
            - ssm:GetParameter*
            Condition:
              StringEquals:
                ssm:ResourceTag/awscodestar:projectArn: !Sub 'arn:${AWS::Partition}:codestar:${AWS::Region}:${AWS::AccountId}:project/${ProjectId}'
            Effect: Allow
            Resource: '*'
        PolicyName: CodeStarWorkerCloudFormationRolePolicy
      RoleName: !Sub 'CodeStarWorker-${ProjectId}-CloudFormation'
    Type: AWS::IAM::Role
  CodeBuildProject:
    Condition: CreateCodeBuildResources
    DependsOn:
    - ToolChainRole
    Properties:
      Artifacts:
        Packaging: zip
        Type: codepipeline
      Description: !Join
      - ''
      - - 'AWS CodeStar created CodeBuild Project for '
        - !Ref 'ProjectId'
      Environment:
        ComputeType: small
        EnvironmentVariables:
        - Name: S3_BUCKET
          Value: !Ref 'S3Bucket'
        - Name: WEBSITE_S3_PREFIX
          Value: !If
          - CreateWebSiteS3Bucket
          - !Join
            - ''
            - - https://s3-us-west-2.amazonaws.com/
              - !Ref 'AWS::NoValue'
          - NoVal
        - Name: WEBSITE_S3_BUCKET
          Value: !If
          - CreateWebSiteS3Bucket
          - !Ref 'AWS::NoValue'
          - NoVal
        - Name: PROJECT_ID
          Value: !Ref 'ProjectId'
        - Name: ACCOUNT_ID
          Value: !Ref 'AWS::AccountId'
        - Name: PARTITION
          Value: !Ref 'AWS::Partition'
        Image: aws/codebuild/standard:2.0
        Type: LINUX_CONTAINER
      Name: !Ref 'ProjectId'
      ServiceRole: !Ref 'ToolChainRole'
      Source:
        Type: codepipeline
    Type: AWS::CodeBuild::Project
  CodeDeployApplication:
    Description: Configuring AWS CodeDeploy for project application
    Properties:
      ApplicationName: !Ref 'ProjectId'
    Type: AWS::CodeDeploy::Application
  DeploymentGroup:
    Description: Creating AWS CodeDeploy deployment groups for project application
    Properties:
      ApplicationName: !Ref 'CodeDeployApplication'
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      DeploymentGroupName: !Join
      - ''
      - - !Ref 'ProjectId'
        - -Env
      Ec2TagFilters:
      - Key: Environment
        Type: KEY_AND_VALUE
        Value: !Join
        - ''
        - - !Ref 'ProjectId'
          - -WebApp
      ServiceRoleArn: !GetAtt
      - ToolChainRole
      - Arn
    Type: AWS::CodeDeploy::DeploymentGroup
  GitHubRepo:
    Condition: CreateGitHubRepo
    DeletionPolicy: Retain
    Description: GitHub repository for application source code
    Properties:
      Code:
        Fn::If:
        - SeedRepo
        - S3:
            Bucket: !Ref 'CodeS3Bucket'
            Key: !Ref 'CodeS3Key'
        - !Ref 'AWS::NoValue'
      EnableIssues: !Ref 'EnableIssues'
      IsPrivate: !Ref 'IsPrivate'
      RepositoryAccessToken: !Ref 'RepositoryToken'
      RepositoryDescription: !Sub '${ProjectId} project repository'
      RepositoryName: !Ref 'RepositoryName'
      RepositoryOwner: !Ref 'RepositoryProviderUsername'
    Type: AWS::CodeStar::GitHubRepository
  PermissionsBoundaryPolicy:
    Description: Creating an IAM managed policy for defining the permissions boundary for an AWS CodeStar project
    Properties:
      Description: IAM policy to define the permissions boundary for IAM entities created in an AWS CodeStar project
      ManagedPolicyName: !Sub 'CodeStar_${ProjectId}_PermissionsBoundary'
      PolicyDocument:
        Statement:
        - Action:
          - '*'
          Effect: Allow
          Resource:
          - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/awscodestar-${ProjectId}-infrastructure/*'
          - !Sub 'arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/${ProjectId}'
          - !Sub 'arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:application:${ProjectId}'
          - !Sub 'arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${ProjectId}/${ProjectId}-Env'
          - !Sub 'arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:*'
          - !Sub 'arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${ProjectId}-Pipeline'
          - !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}'
          - !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}/*'
          Sid: 1
        - Action:
          - kms:Encrypt
          - kms:Decrypt
          - kms:GenerateDataKey
          Effect: Allow
          Resource:
          - !Sub 'arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3'
          Sid: 2
        - Action:
          - iam:PassRole
          Effect: Allow
          Resource:
          - !GetAtt 'CloudFormationTrustRole.Arn'
          Sid: 3
        - Action:
          - cloudtrail:CreateTrail
          - cloudtrail:StartLogging
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:DescribeLogGroups
          - logs:PutLogEvents
          - sns:Get*
          - sns:List*
          - sns:Publish
          - sns:Subscribe
          - xray:Put*
          Effect: Allow
          Resource: '*'
          Sid: 4
        Version: 2012-10-17
    Type: AWS::IAM::ManagedPolicy
  PipelineWebhook:
    DependsOn: ProjectPipeline
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: ${ThirdPartyWebhookSecretToken}
      Filters:
      - JsonPath: $.ref
        MatchEquals: refs/heads/{Branch}
      RegisterWithThirdParty: true
      TargetAction: ApplicationSource
      TargetPipeline: !Ref 'ProjectPipeline'
      TargetPipelineVersion: !GetAtt 'ProjectPipeline.Version'
    Type: AWS::CodePipeline::Webhook
  ProjectPipeline:
    DependsOn:
    - ToolChainRole
    - S3Bucket
    - CodeBuildProject
    - CloudFormationTrustRole
    Description: Creating a deployment pipeline for your project in AWS CodePipeline
    Properties:
      ArtifactStore:
        Location: !Ref 'S3Bucket'
        Type: S3
      Name: !Sub '${ProjectId}-Pipeline'
      RoleArn: !GetAtt 'ToolChainRole.Arn'
      Stages:
      - Actions:
        - ActionTypeId:
            Category: Source
            Owner: ThirdParty
            Provider: GitHub
            Version: 1
          Configuration:
            Branch: !Ref 'RepositoryBranch'
            OAuthToken: !Ref 'RepositoryToken'
            Owner: !Ref 'RepositoryProviderUsername'
            PollForSourceChanges: false
            Repo: !Ref 'RepositoryName'
          InputArtifacts: [
            ]
          Name: ApplicationSource
          OutputArtifacts:
          - Name: !Sub '${ProjectId}-SourceArtifact'
          RunOrder: 1
        Name: Source
      - Actions:
        - ActionTypeId:
            Category: Build
            Owner: AWS
            Provider: CodeBuild
            Version: 1
          Configuration:
            ProjectName: !Ref 'ProjectId'
          InputArtifacts:
          - Name: !Sub '${ProjectId}-SourceArtifact'
          Name: PackageExport
          OutputArtifacts:
          - Name: !Sub '${ProjectId}-BuildArtifact'
          RunOrder: 1
        Name: Build
      - Actions:
        - ActionTypeId:
            Category: Deploy
            Owner: AWS
            Provider: CloudFormation
            Version: 1
          Configuration:
            ActionMode: CHANGE_SET_REPLACE
            Capabilities: CAPABILITY_NAMED_IAM
            ChangeSetName: pipeline-changeset
            ParameterOverrides: !Sub "{\n  \"ProjectId\":\"${ProjectId}\",\n  \"InstanceType\"\
              :\"${InstanceType}\",\n  \"WebAppInstanceProfile\":\"${WebAppInstanceProfile}\"\
              ,\n  \"ImageId\":\"ami-08d489468314a58df\",\n  \"KeyPairName\":\"${KeyPairName}\"\
              ,\n  \"SubnetId\":\"${SubnetId}\",\n  \"VpcId\":\"${VpcId}\"\n}\n"
            RoleArn: !GetAtt 'CloudFormationTrustRole.Arn'
            StackName: !Sub 'awscodestar-${ProjectId}-infrastructure'
            TemplateConfiguration: !Sub '${ProjectId}-BuildArtifact::template-configuration.json'
            TemplatePath: !Sub '${ProjectId}-BuildArtifact::template.yml'
          InputArtifacts:
          - Name: !Sub '${ProjectId}-BuildArtifact'
          Name: GenerateChangeSet
          OutputArtifacts: [
            ]
          RunOrder: 1
        - ActionTypeId:
            Category: Deploy
            Owner: AWS
            Provider: CloudFormation
            Version: 1
          Configuration:
            ActionMode: CHANGE_SET_EXECUTE
            ChangeSetName: pipeline-changeset
            StackName: !Sub 'awscodestar-${ProjectId}-infrastructure'
          InputArtifacts: [
            ]
          Name: ExecuteChangeSet
          OutputArtifacts: [
            ]
          RunOrder: 2
        - ActionTypeId:
            Category: Deploy
            Owner: AWS
            Provider: CodeDeploy
            Version: 1
          Configuration:
            ApplicationName: !Ref 'CodeDeployApplication'
            DeploymentGroupName: !Ref 'DeploymentGroup'
          InputArtifacts:
          - Name: !Sub '${ProjectId}-BuildArtifact'
          Name: Deploy
          RunOrder: 3
        Name: Deploy
    Type: AWS::CodePipeline::Pipeline
  S3ArtifactBucketPolicy:
    Description: Setting Amazon S3 bucket policy for AWS CodePipeline access
    Properties:
      Bucket: !Ref 'S3Bucket'
      PolicyDocument:
        Id: SSEAndSSLPolicy
        Statement:
        - Action:
          - s3:GetObject
          - s3:GetObjectVersion
          - s3:GetBucketVersioning
          Condition:
            Bool:
              aws:SecureTransport: false
          Effect: Allow
          Principal:
            AWS:
            - !GetAtt 'ToolChainRole.Arn'
            - !GetAtt 'CloudFormationTrustRole.Arn'
          Resource:
          - !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}'
          - !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}/*'
          Sid: WhitelistedGet
        - Action:
          - s3:PutObject
          Effect: Allow
          Principal:
            AWS:
            - !GetAtt 'ToolChainRole.Arn'
          Resource:
          - !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}'
          - !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}/*'
          Sid: WhitelistedPut
        Version: 2012-10-17
    Type: AWS::S3::BucketPolicy
  S3Bucket:
    DeletionPolicy: Retain
    Description: Creating Amazon S3 bucket for AWS CodePipeline artifacts
    Properties:
      BucketName: !Join
      - '-'
      - - aws
        - codestar
        - !Ref 'AWS::Region'
        - !Ref 'AWS::AccountId'
        - !Ref 'ProjectId'
        - pipe
      Tags:
      - Key: Name
        Value: !Join
        - '-'
        - - !Ref 'ProjectId'
          - S3Bucket
      VersioningConfiguration:
        Status: Enabled
    Type: AWS::S3::Bucket
  ToolChainRole:
    Description: Creating toolchain role in IAM for Amazon EC2 instances
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
            - codedeploy.amazonaws.com
            - codepipeline.amazonaws.com
            - codestar.amazonaws.com
            - elasticbeanstalk.amazonaws.com
            - events.amazonaws.com
            - lambda.amazonaws.com
      ManagedPolicyArns:
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AWSCodeCommitFullAccess'
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AWSCodeBuildAdminAccess'
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AWSCodeDeployFullAccess'
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AWSCodePipelineFullAccess'
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AWSElasticBeanstalkFullAccess'
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AWSLambdaFullAccess'
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AWSCodeStarFullAccess'
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchEventsFullAccess'
      Path: /
      PermissionsBoundary: !Ref 'PermissionsBoundaryPolicy'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - kms:GenerateDataKey*
            - kms:Encrypt
            - kms:Decrypt
            Effect: Allow
            Resource: '*'
        PolicyName: ToolChainWorkerPolicy
      RoleName: !Sub 'CodeStarWorker-${ProjectId}-ToolChain'
    Type: AWS::IAM::Role
  WebAppInstanceProfile:
    Description: Creating Amazon EC2 instance profile for instances
    Properties:
      Path: /
      Roles:
      - !Ref 'WebAppRole'
    Type: AWS::IAM::InstanceProfile
  WebAppRole:
    Description: Creating service role in IAM for Amazon EC2 instances
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Sid: ''
      Path: /
      RoleName: !Sub 'CodeStarWorker-${ProjectId}-WebApp'
    Type: AWS::IAM::Role
  WebAppRolePolicies:
    Description: Setting IAM policy for service role for Amazon EC2 instances
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - ec2:Describe*
          Effect: Allow
          Resource:
          - '*'
        - Action:
          - s3:Get*
          - s3:List*
          Effect: Allow
          Resource:
          - !Sub 'arn:${AWS::Partition}:s3:::aws-codedeploy-${AWS::Region}*'
          - !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}'
          - !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}/*'
        - Action:
          - s3:GetObject
          Effect: Allow
          Resource:
          - !Sub 'arn:${AWS::Partition}:s3:::aws-codestar-${AWS::Region}-${AWS::AccountId}/${ProjectId}/ssh/*'
          - !Sub 'arn:${AWS::Partition}:s3:::awscodestar-remote-access-signatures-us-west-2/*'
          - !Sub 'arn:${AWS::Partition}:s3:::awscodestar-templates-common/*'
        - Action:
          - cloudformation:DescribeStackResources
          Effect: Allow
          Resource:
          - !Ref 'AWS::StackId'
        - Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - logs:DescribeLogStreams
          Effect: Allow
          Resource:
          - !Sub 'arn:${AWS::Partition}:logs:*:*:*'
        - Action:
          - codedeploy:BatchGet*
          - codedeploy:Get*
          - codedeploy:List*
          Effect: Allow
          Resource:
          - !Sub 'arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:application:${CodeDeployApplication}'
          - !Sub 'arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${CodeDeployApplication}/${DeploymentGroup}'
          - !Sub 'arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:*'
      PolicyName: CodeStarWorkerBackendPolicy
      Roles:
      - !Ref 'WebAppRole'
    Type: AWS::IAM::Policy
